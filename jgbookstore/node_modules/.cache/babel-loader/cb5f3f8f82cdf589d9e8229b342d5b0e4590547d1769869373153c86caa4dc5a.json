{"ast":null,"code":"// API.tsx\n\n// Base URL of the API\nconst baseURL = 'http://localhost:4730';\n\n// Function to request all books\nexport const reqAllBooks = async () => {\n  try {\n    const response = await fetch(`${baseURL}/books`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching books:', error);\n    throw error;\n  }\n};\n\n// Function to request one book by ISBN\nexport const reqBookByISBN = async isbn => {\n  try {\n    const response = await fetch(`${baseURL}/books/${isbn}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching book:', error);\n    throw error;\n  }\n};\n\n// Function to post a new book\nexport const postNewBook = async book => {\n  try {\n    const response = await fetch(`${baseURL}/books`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(book)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error posting book:', error);\n    throw error;\n  }\n};\n\n// Function to update an existing book\nexport const updateExistingBook = async (book, isbn) => {\n  try {\n    const response = await fetch(`${baseURL}/books/${isbn}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(book)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error updating book:', error);\n    throw error;\n  }\n};\n\n// Function to delete a book\nexport const deleteABook = async isbn => {\n  try {\n    const response = await fetch(`${baseURL}/books/${isbn}`, {\n      method: 'DELETE'\n    });\n    if (response.ok) {\n      return \"Book deleted successfully\";\n    } else {\n      throw new Error('Failed to delete book');\n    }\n  } catch (error) {\n    console.error('Error deleting book:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["baseURL","reqAllBooks","response","fetch","data","json","error","console","reqBookByISBN","isbn","postNewBook","book","method","headers","body","JSON","stringify","updateExistingBook","deleteABook","ok","Error"],"sources":["C:/Users/Jordan/VSCode/JGBookstore-FED/jgbookstore/src/utils/Scripts/API.tsx"],"sourcesContent":["// API.tsx\r\n\r\nimport { Book } from '../Interfaces/Book';\r\n\r\n// Base URL of the API\r\nconst baseURL: string = 'http://localhost:4730';\r\n\r\n// Function to request all books\r\nexport const reqAllBooks = async (): Promise<Book[]> => {\r\n  try {\r\n    const response = await fetch(`${baseURL}/books`);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching books:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to request one book by ISBN\r\nexport const reqBookByISBN = async (isbn: string): Promise<Book> => {\r\n  try {\r\n    const response = await fetch(`${baseURL}/books/${isbn}`);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching book:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to post a new book\r\nexport const postNewBook = async (book: Book): Promise<Book> => {\r\n  try {\r\n    const response = await fetch(`${baseURL}/books`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(book),\r\n    });\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error posting book:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to update an existing book\r\nexport const updateExistingBook = async (book: Book, isbn: string): Promise<Book> => {\r\n  try {\r\n    const response = await fetch(`${baseURL}/books/${isbn}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(book),\r\n    });\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error updating book:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to delete a book\r\nexport const deleteABook = async (isbn: string): Promise<string> => {\r\n  try {\r\n    const response = await fetch(`${baseURL}/books/${isbn}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (response.ok) {\r\n      return \"Book deleted successfully\";\r\n    } else {\r\n      throw new Error('Failed to delete book');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting book:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA;;AAIA;AACA,MAAMA,OAAe,GAAG,uBAAuB;;AAE/C;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAA6B;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,QAAO,CAAC;IAChD,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAOC,IAAY,IAAoB;EAClE,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAASS,IAAK,EAAC,CAAC;IACxD,MAAML,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,WAAW,GAAG,MAAOC,IAAU,IAAoB;EAC9D,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,QAAO,EAAE;MAC/CY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC3B,CAAC,CAAC;IACF,MAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,kBAAkB,GAAG,MAAAA,CAAON,IAAU,EAAEF,IAAY,KAAoB;EACnF,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAASS,IAAK,EAAC,EAAE;MACvDG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC3B,CAAC,CAAC;IACF,MAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,WAAW,GAAG,MAAOT,IAAY,IAAsB;EAClE,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAASS,IAAK,EAAC,EAAE;MACvDG,MAAM,EAAE;IACV,CAAC,CAAC;IACF,IAAIV,QAAQ,CAACiB,EAAE,EAAE;MACf,OAAO,2BAA2B;IACpC,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;EACF,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}